mp.messaging.outgoing.channel-x.connector=smallrye-kafka
mp.messaging.outgoing.channel-x.topic=topic-x
mp.messaging.outgoing.channel-x.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#TODO in mp-config it's possible to use topic directly as channel-name
#mp.messaging.outgoing.[topicName].connector=smallrye-kafka

mp.messaging.incoming.channel-y.connector=smallrye-kafka
mp.messaging.incoming.channel-y.topic=topic-y
mp.messaging.incoming.channel-y.auto.offset.reset=latest
mp.messaging.incoming.channel-y.group.id=${HOSTNAME}
mp.messaging.incoming.channel-y.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.outgoing.transfer-channel1.connector=smallrye-kafka
mp.messaging.outgoing.transfer-channel1.topic=transfer-topic
mp.messaging.outgoing.transfer-channel1.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.transfer-channel2.connector=smallrye-kafka
mp.messaging.outgoing.transfer-channel2.topic=transfer-topic
mp.messaging.outgoing.transfer-channel2.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.outgoing-channel-string.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-channel-string.topic=outgoing-channel-string-topic
mp.messaging.outgoing.outgoing-channel-string.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.incoming-channel-part.connector=smallrye-kafka
mp.messaging.incoming.incoming-channel-part.topic=incoming-channel-part-topic
mp.messaging.incoming.incoming-channel-part.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.incoming-channel-string.connector=smallrye-kafka
mp.messaging.incoming.incoming-channel-string.topic=incoming-channel-string-topic
mp.messaging.incoming.incoming-channel-string.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.outgoing.outgoing-channel-part.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-channel-part.topic=outgoing-channel-part-topic
mp.messaging.outgoing.outgoing-channel-part.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.prices.connector=smallrye-kafka

# Set root path to / (all resources - inclusive html pages are)
quarkus.http.root-path=/test-svc
kafka.bootstrap.servers=PLAINTEXT://localhost:9092

#%dev.quarkus.asyncapi.annotation.scanner.enabled=false
#use AsyncApiAFilter
%test.quarkus.asyncapi.annotation.scanner.filter=io.quarkiverse.asyncapi.annotation.scanner.MyAsyncApiFilter

#AsyncApi Info
quarkus.asyncapi.annotation.scanner.info.title=Test Service API
quarkus.asyncapi.annotation.scanner.info.description=Test Service provide Kafka-messages
quarkus.asyncapi.annotation.scanner.info.contact.email=support@gec.io
quarkus.asyncapi.annotation.scanner.info.contact.name=Contact and Support
quarkus.asyncapi.annotation.scanner.info.contact.url=https://gec.io/kontakt/
quarkus.asyncapi.annotation.scanner.info.license.name=Commercial
quarkus.asyncapi.annotation.scanner.info.license.url=https://gec.io/
%dev.quarkus.asyncapi.annotation.scanner.info.title=Test Service API (development)
%test.quarkus.asyncapi.annotation.scanner.info.title=Test Service API (test)
#in real life ${project.version}
quarkus.asyncapi.annotation.scanner.info.version=1.2.3

#AsyncApi channels
quarkus.asyncapi.annotation.scanner.channel.transfer-channel1.description=description of the transfer-channel1 from application.properties
quarkus.asyncapi.annotation.scanner.channel.transfer-channel2.description=description of the transfer-channel2 from application.properties
#which infos can be obtained by existing message-configs? Or by org.apache.kafka.clients.admin.AdminClient??
#TODO https://github.com/asyncapi/bindings/blob/master/kafka/README.md#channel-binding-object
#see mp.messaging.outgoing.[channel].topic
#see mp.messaging.incoming.[channel].topic
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".topic

#see mp.messaging.incoming.[channel].partitions
#see mp.messaging.outgoing.[channel].partitions
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".partitions
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".replicas
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".topicConfiguration.cleanup.policy
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".topicConfiguration.retention.ms
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".topicConfiguration.retention.bytes
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".topicConfiguration.delete.retention.ms
#quarkus.asyncapi.annotation.scanner.channel."channel-name".bindings."kafka".topicConfiguration.max.message.bytes

#TODO https://github.com/asyncapi/bindings/blob/master/kafka/README.md#operation-binding-object
#see mp.messaging.incoming.[channel].group.id
#quarkus.asyncapi.annotation.scanner.channel."channel-name".subscribe.bindings."kafka".groupId

#AsyncApi server
quarkus.asyncapi.annotation.scanner.server.testServer.url=${kafka.bootstrap.servers}
quarkus.asyncapi.annotation.scanner.server.testServer.protocol=kafka

